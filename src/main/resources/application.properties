# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "s4sgen"
spring.datasource.url = jdbc:mysql://localhost:3306/s4sgen?useSSL=false

# Username and password
spring.datasource.username = root
spring.datasource.password = 

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ===============================
# = Thymeleaf configurations
# ===============================
#spring.thymeleaf.cache=false

# ===============================
# = LOGGING
# ===============================
#logging.level.org.springframework.web=DEBUG
#logging.level.org.hibernate=ERROR

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================
users-query=select login, password, active from user where login=?
roles-query=select u.login, r.role from user u inner join user_role ur on(u.id=ur.id) inner join role r on(ur.role_id=r.role_id) where u.login=?
